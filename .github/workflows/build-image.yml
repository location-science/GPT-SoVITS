name: Build Container Image and Deploy to Azure Cloud

on:
  push:
    # branches:
    #   - main
    tags:
      - 'v*.*.*'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete huge unnecessary tools folder
        run: rm -rf /opt/hostedtoolcache && rm -rf /usr/share/dotnet/ && df -h
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: my_docker/Dockerfile
          # target: production
          push: ${{ github.event_name != 'pull_request' }} # Don't push on PR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # build-args: |
          #   API_KEY=${{ secrets.TTS_ZH_API_KEY }}


  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
    
    - name: Extract tag name
      id: get_tag
      run: echo "TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT
    
    - name: Set image name to all lowercase
      id: lowercase_image_name
      run: echo "IMAGE_NAME_LC=$(echo ${IMAGE_NAME,,})" >> $GITHUB_OUTPUT
      env:
        IMAGE_NAME: ${{ github.repository }}
    
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Container App
      env:
        TAG_NAME: ${{ steps.get_tag.outputs.TAG_NAME }}
        IMAGE_NAME_LC: ${{ steps.lowercase_image_name.outputs.IMAGE_NAME_LC }}
      uses: azure/container-apps-deploy-action@v1
      with:
        registryUrl: ${{ env.REGISTRY }}
        registryUsername: ${{ github.actor }}
        registryPassword: ${{ secrets.PAT }}
        imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:${{ env.TAG_NAME }}
        containerAppName: tts-zh
        resourceGroup: smartguide-nlp
        containerAppEnvironment: nlp-env
        environmentVariables: TTS_ZH_API_KEY=${{secrets.TTS_ZH_API_SEC}} GPT_SoVITS_MODEL_VERSION=V2



  smoke_test:
    runs-on: ubuntu-latest
    needs: deploy
    env:
      AZURE_RESOURCE_GROUP: smartguide-nlp
      AZURE_CONTAINER_APP: tts-zh
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Wait for Container App to be Ready
        run: |
          MAX_ATTEMPTS=30
          WAIT_SECONDS=10
          for (( i=1; i<=$MAX_ATTEMPTS; i++ )); do
              echo "Checking if the container app is ready (attempt $i/$MAX_ATTEMPTS)..."
              STATUS=$(az containerapp revision list \
                        --resource-group $AZURE_RESOURCE_GROUP \
                        --name $AZURE_CONTAINER_APP \
                        --query "[?properties.active].{Status:properties.healthState}" \
                        -o tsv)

              if [[ "$STATUS" == "Healthy" ]]; then
                  echo "Container app is ready!"
                  break
              fi

              if [[ $i -eq $MAX_ATTEMPTS ]]; then
                  echo "Container app did not become ready after $MAX_ATTEMPTS attempts."
                  exit 1
              fi

              echo "Container app not ready yet. Waiting $WAIT_SECONDS seconds before retrying..."
              sleep $WAIT_SECONDS
          done

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Specify your desired Python version if needed.

      - name: Install requests library
        run: |
          python3 -m pip install --upgrade pip
          pip3 install requests

      - name: Run Smoke Tests
        run: python3 tests/test_smoke.py